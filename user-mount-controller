#!/bin/bash

ALLOW_FILE=.volume.conf	# namespace/pvc
MOUNTPOINT=.volume
FIFO=/var/run/user-mount

rm -f "$FIFO"

user-watch() {	# $1=username
  [ -z "$1" ] && return
  H=$(homedir $1)
  [ -z "$H" -o ! -d "$H" ] && return
  echo U $u > "$FIFO"	# maybe we missed something, so just to be sure
  inotify -mq -e create,close_write,move,delete "$H" | while read fname events arg
  do
    [ "$arg" = "$ALLOW_FILE" ] && echo U $u > "$FIFO"
  done
}

start-pvc-watch() {
  kubectl get pvc -A -w -o jsonpath='{.metadata.namespace}{"/"}{.metadata.name}{"\n"}' \
  | while read pvc
    do
      echo P "$pvc" > "$FIFO"
    done &
  PVC_WATCH_PID=$!
}

declare -A PVC_USER	# [namespace/pvc] -> list of usernames
declare -A USER_PVC     # [username] -> list of namespace/pvc
declare -A USER_WATCH   # [username] -> pid of watch process

trap 'kill $PVC_WATCH_PID ${USER_WATCH[*]}' exit

start-user-watch() {	# $1=username
  [ -n "$1" ] || return
  [ -n "${USER_WATCH[$1]}" -a -d /proc/"${USER_WATCH[$1]}" ] && return # already running
  user-watch "$1" &
  USER_WATCH[$1]=$!
}
stop-user-watch() {	# $1=username
  [ -n "$1" ] || return
  [ -z "${USER_WATCH[$1]}" ] && return		# no watch
  [ -d /proc/"${USER_WATCH[$1]}" ] && kill "${USER_WATCH[$1]}"
  USER_WATCH[$1]=''
}

homedir() {
  getent passwd "$1" | cut -f6 -d:
}
home-to-user() {
  getent | awk -F: '$6=="'"$1"'" {print $1}'
}

mkfifo -m 600 "$FIFO"

ensure_mounted() {	# $u, $v
  H=$(homedir $u)
  grep -q "^[^ ]* $H/$MOUNTPOINT/$v " /proc/mounts && continue	# already mounted
  ns=${v%/*}
  pvc=${v#*/}
  pv=$(kubectl -n $ns get pvc/$pvc -o jsonpath='{.spec.volumeName}')
  [ -z "$pv" ] && continue
  pvpath="$(kubectl get pv/$pv -o jsonpath='{.spec.hostPath.path}')"
  [ -z "$pvpath" ] && return
  [ -d "$pvpath" ] || return
  su "$u" mkdir -p "$H/$MOUNTPOINT/$v" || return
  mount -o bind,nodev,nosuid "$pvpath" "$H/$MOUNTPOINT/$v"
}

start-pvc-watch

while true
do
  while read objtype ref x
  do
    case "$objtype" in
    U*|u*) u="$ref"
         H="$(homedir "$ref")"
         match=0;for uu in "${PVC_USER[@]}"; do [ "$uu" = "$u" ] && match=1 && break; done
         if [ "$match" = 0 ]
         then 
           stop-user-watch $u
           PVC_USER[$v]=''
           continue
         fi
         [ -z "$H" ] && continue
         [ -d "$H" ] || continue
         if [ -r "$H/$ALLOW_FILE" ]
         then
           USER_PVC[$u]=$(cut -f1 -d'#' "$H/$ALLOW_FILE" | awk '{print $1}' | tr -s '\t\n' '  ')
         else 
           USER_PVC[$u]=''
         fi
         for v in ${USER_PVC[$u]}
         do
           [ "${PVC_USER[$v]/$u/}" = "${PVC_USER[$v]}" ] && continue	# PVC does not allow this user
           ensure_mounted
         done
         awk '$2 ~ "^'"$H/$MOUNTPOINT/"'" {print gensub("^'"$H/$MOUNTPOINT/"'", "", "g", $2);}' \
         | while read v x
         do
           [ "${PVC_USER[$v]/$u/}" != "${PVC_USER[$v]}" ] \
           && [ "${USER_PVC[$u]/$v/}" != "${USER_PVC[$u]}" ] \
           && continue
           umount -f $H/$MOUNTPOINT/$v
         done
    ;;
    P*|p*) v=$ref
         ns="${v%/*}"; pvc="${v#*/}"
         PVC_USER[$v]=$(kubectl -n $ns get pvc/$pvc -o jsonpath='{.metadata.annotations.user-mount}')
         for u in ${PVC_USER[$v]}
         do
           start-user-watch $u
           [ "${USER_PVC[$u]/$v/}" = "${USER_PVC[$u]}" ] && continue	# User does not want to mount the volume
           ensure_mounted
         done
         awk '$2 ~ "'"/$v"'$" {print gensub("'"/$MOUNTPOINT/$v"'$", "", "g", $2);}' /proc/mounts \
         | while read hh x
         do
           u="$(home-to-user $hh)"
           [ "${PVC_USER[$v]/$u/}" != "${PVC_USER[$v]}" ] \
           && [ "${USER_PVC[$u]/$v/}" != "${USER_PVC[$u]}" ] \
           && continue
           umount -f $hh/$MOUNTPOINT/$v
         done
    ;;
    esac
  done < "$FIFO"
done
