#!/bin/bash

# default values:
[ -z "$CONFIG_FILE" ]	&& CONFIG_FILE=.volume.conf	# format: each line contains namespace/pvc
[ -z "$RMOUNTPOINT" ]	&& MOUNTPOINT=.volume
[ -z "$FIFO" ]		&& FIFO=/var/run/user-mount
[ -z "$KUBECONFIG" ]	&& KUBECONFIG=/opt/user-mount/etc/kubeconfig.yaml

declare -A PVC_USER	# [namespace/pvc] -> list of usernames
declare -A USER_PVC     # [username] -> list of namespace/pvc
declare -A USER_WATCH   # [username] -> pid of watch process

# initial check
[ ! -x /usr/bin/inotifywait ] && echo "please install package inotify-tools!" >&2 && exit 1
[ ! -r "$KUBECONFIG" -o ! -f "$KUBECONFIG" ] && "kube config not found or not readable: $KUBECONFIG" >&2 && exit 1
echo "Waiting for api-server..." >&2
while ! kubectl --kubeconfig "$KUBECONFIG" get pvs -o name ; do sleep 60 ; done &> /dev/null
echo "OK, api-server reachable." >&2

start-pvc-watch() {
  kubectl --kubeconfig "$KUBECONFIG" get pvc -A -w -o jsonpath='{"P "}{.metadata.namespace}{"/"}{.metadata.name}{"\n"}' </dev/null > "$FIFO" &
  PVC_WATCH_PID=$!
  echo "PVC watch started as $PVC_WATCH_PID" >&2
}

start-user-watch() {	# $1=username
  echo "Starting user-watch $1" >&2
  [ -n "$1" ] || return
  [ -n "${USER_WATCH[$1]}" -a -d /proc/"${USER_WATCH[$1]}" ] && return # already running
  unset USER_WATCH[$1]
  uhome=$(homedir $1)
  [ -z "$uhome" -o ! -d "$uhome" ] && return
  inotifywait -mq -e create,close_write,move,delete "$uhome" --format "U $1 %f" </dev/null > "$FIFO" &
  USER_WATCH[$1]=$!
  echo "U $1" > "$FIFO" &	# forcing initial check (needs & to prevent deadlock)
  echo "User watch [$1] started as ${USER_WATCH[$1]}" >&2
}

stop-user-watch() {	# $1=username
  echo "Stopping user-watch $1" >&2
  [ -n "$1" ] || return
  [ -z "${USER_WATCH[$1]}" ] && return		# no watch
  [ -d /proc/"${USER_WATCH[$1]}" ] && kill "${USER_WATCH[$1]}"
  unset USER_WATCH[$1]
}

homedir() {		# $1=user
  getent passwd "$1" | cut -f6 -d:
}

home-to-user() {	# $1=home_directory
  getent passwd | awk -F: '$6=="'"$1"'" {print $1}'
}

does_user_ref_vol() {	# $1=user $2=volume
  local vlist=" ${USER_PVC[$1]} "
  [ "${vlist/ $2 }" != "$vlist" ]
}
does_vol_ref_user() {	# $1=user $2=volume
  local ulist=" ${PVC_USER[$2]} "
  [ "${ulist/ $1 }" != "$ulist" ]
}
check_references() {	# $1=user $2=volume
  does_user_ref_vol "$1" "$2" && does_vol_ref_user "$1" "$2"
}

ensure_mounted() {	# $1=user, $2=vol
  local uhome=$(homedir $1)
  grep -q "^[^ ]* $uhome/$MOUNTPOINT/$2 " /proc/mounts && return	# already mounted
  local ns=${2%/*}
  local pvc=${2#*/}
  local mnt=$uhome/$MOUNTPOINT/$ns/$pvc
  local pv=$(kubectl --kubeconfig "$KUBECONFIG" -n $ns get pvc/$pvc -o jsonpath='{.spec.volumeName}')
  [ -z "$pv" ] && return	# PVC likely still not bound to PV
  pvpath="$(kubectl --kubeconfig "$KUBECONFIG" get pv/$pv -o jsonpath='{.spec.hostPath.path}')"
  [ -z "$pvpath" ] && return	# PV is likely not of hostPath type
  [ -d "$pvpath" ] || return	# PV is not a directory?!
  su "$1" -c "mkdir -p $mnt" || return
  echo "Mounting PVC $2 into $mnt" >&2
  mount -o bind,nodev,nosuid "$pvpath" "$mnt"
}

check_umount() {	# $1=user_home $2=volume
  local uhome_re="${1:-.*}"
  local vol_re="${2:-.*}"
  local xuhome xvol xuser
  awk '$2 ~ "^'"$uhome_re/$MOUNTPOINT/$vol_re"'$" {print gensub("^('"$uhome_re)/$MOUNTPOINT/($vol_re)"'$", "\\1 \\2", 1, $2);}' /proc/mounts \
  | while read xuhome xvol
  do
    xuser="$(home-to-user "$xuhome")"
    check_references "$xuser" "$xvol" && continue
    echo "Unmounting $xvol for user $xuser"
    umount -f $xuhome/$MOUNTPOINT/$xvol
    rmdir $xuhome/$MOUNTPOINT/$xvol
    rmdir --ignore-fail-on-non-empty $xuhome/$MOUNTPOINT/${xvol%/*} $xuhome/$MOUNTPOINT 
  done
}

restarter() {		# restarts any missing child process
  [ ! -d "/proc/$PVC_WATCH_PID" ] && echo "restarting PVC watch" >&2 && start-pvc-watch
  for user in "${!USER_WATCH[@]}"
  do
    [ ! -d "/proc/${USER_WATCH[$user]}" ] && echo "restarting dead process ${USER_WATCH[$user]} for user $user" && start-user-watch "$user"
  done
}

restart-all() {		# restart everything
  trap - CHLD
  kill ${USER_WATCH[*]} $PVC_WATCH_PID
  exec $0
  exit
}


rm -f "$FIFO"		# remove old fifo pathname
mkfifo -m 600 "$FIFO"	# create a new one (to separate possible old processes)

trap 'kill $PVC_WATCH_PID ${USER_WATCH[*]}' exit	# kill child processes on exit
trap restarter CHLD					# check children on SIGCHILD
trap restart-all HUP					# restart all if we have to reload config

start-pvc-watch		# we always watch PVCs

while true
do
  read -t 10 objtype ref file x || continue
  case "$objtype" in
  U*|u*)   user="$ref"
           [ -n "$file" -a "$file" != "$CONFIG_FILE" ] && continue
           uhome="$(homedir "$user")"
           USER_PVC[$user]=''
           # does any volume refer to the user $user ?
           match=0;for uu in ${PVC_USER[*]}; do [ "$uu" = "$user" ] && match=1 && break; done
           if [ "$match" = 0 ]
           then 
             stop-user-watch $user
             continue # no volume reffered to the user => no need to umount
           fi
           [ -z "$uhome" ] && echo "Error: User '$user' has no home directory?" >&2 && continue	
           [ ! -d "$uhome" ] && echo "Error: User '$user': home directory '$uhome' is not a directory?" >&2 && continue
           [ -r "$uhome/$CONFIG_FILE" -a -f "$uhome/$CONFIG_FILE" ] \
           && USER_PVC[$user]=$( cut -f1 -d'#' "$uhome/$CONFIG_FILE" \
                               | tr -dc 'a-z./ \t\n-' \
                               | awk '{print $1}' \
                               | tr -s ' \t\n' ' ' )
           for vol in ${USER_PVC[$user]}
           do
             does_vol_ref_user $user $vol && ensure_mounted $user $vol
           done
           check_umount $uhome ""
  ;;
  P*|p*)   vol=$ref
           ns="${vol%/*}"; pvc="${vol#*/}"
           PVC_USER[$vol]=$(kubectl --kubeconfig "$KUBECONFIG" -n $ns get pvc/$pvc -o jsonpath='{.metadata.annotations.user-mount}')
           for user in ${PVC_USER[$vol]}
           do
             start-user-watch $user
             does_user_ref_vol $user $vol && ensure_mounted $user $vol
           done
           check_umount "" $vol
  ;;
  esac
done < "$FIFO"
